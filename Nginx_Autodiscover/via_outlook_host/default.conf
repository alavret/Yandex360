server {
    listen              443 ssl;
    server_name         outlook.office365.com;
    ssl_certificate     /etc/nginx/ssl/outlook_office365_com.crt;
    ssl_certificate_key /etc/nginx/ssl/outlook_office365_com.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    location ~* autodiscover/autodiscover.json {
      default_type text/xml;

      content_by_lua '
        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeouts(1000, 1000, 1000) -- 1 sec
        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.status = 404
            ngx.say("Failed to connect redis: ", err)
            ngx.exit(ngx.status)
        end
        local s = ngx.var.request_uri
        local i1, j1, err = ngx.re.find(s, "(json)", "jo")
        if i1 == nil then
          ngx.status = 404
          ngx.say("Need Exchange autodiscover request to work properly.")
          ngx.exit(ngx.status)
        end
        local substr = string.sub(s, j1+7, -1)
        local i2, j2, err = ngx.re.find( substr, "(Protocol)", "jo")
        if i2 == nil then
          ngx.status = 404
          ngx.say("Need Exchange autodiscover request to work properly.")
          ngx.exit(ngx.status)
        end
        local orig_email = string.sub( substr, 1, i2-2 )
        local res, err = red:get(orig_email)
        if not res then
          ngx.status = 404
          ngx.say("Error to get data from redis: ", err)
          gx.exit(ngx.status)
        end
        if res == ngx.null then
          ngx.status = 404
          ngx.say("E-mail not exist in Yandex 360: ", orig_email)
          ngx.exit(ngx.status)
        end
        ngx.say([[{"Protocol":"Autodiscoverv1","Url":"https://outlook.office365.com/autodiscover/autodiscover.xml"}]])
      ';
    
    }
    
    location ~* autodiscover/autodiscover.xml {
       default_type text/xml;

       content_by_lua '
        local file = "/var/wwwroot/autodiscover.xml"
        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeouts(1000, 1000, 1000) -- 1 sec
        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.status = 404
            ngx.say("Failed to connect redis: ", err)
            ngx.exit(ngx.status)
        end
        ngx.req.read_body()
        local body = ngx.req.get_body_data()
        local i1, j1, err = ngx.re.find(body, "(EMailAddress)", "jo")
        if i1 == nil then
          ngx.status = 404
          ngx.say("Need Exchange autodiscover request to work properly.")
          ngx.exit(ngx.status)
        end
        local substr = string.sub(body, j1+2, -1)
        local i2, j2, err = ngx.re.find( substr, "(EMailAddress)", "jo")
        if i2 == nil then
          ngx.status = 404
          ngx.say("Need Exchange autodiscover request to work properly.")
          ngx.exit(ngx.status)
        end
        local orig_email = string.sub( substr, 1, i2-3 )
        local res, err = red:get(orig_email)
        if not res then
          ngx.status = 404
          ngx.say("Error to get data from redis: ", err)
          gx.exit(ngx.status)
        end
        if res == ngx.null then
          ngx.status = 404
          ngx.say("E-mail not exist in Yandex 360: ", orig_email)
          ngx.exit(ngx.status)
        end
        local xml_key = "xml"
        local xml_data, err = red:get(xml_key)
        if not res then
          ngx.status = 404
          ngx.say("Error to get data from redis: ", err)
          gx.exit(ngx.status)
        end
        if xml_data == ngx.null then
          local f = io.open(file, "rb")
          local content = f:read("*all")
          f:close()
          ok, err = red:set(xml_key, content)
          xml_data = content
        end
        local output = xml_data:gsub("sample@work_domain.ru",orig_email):gsub("__display_name__",res)
        ngx.say(output)
      ';
    }
}
